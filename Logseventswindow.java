/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package saltosynctool;

import java.awt.Desktop;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PrintStream;
import java.net.URL;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTextArea;
import javax.swing.filechooser.FileSystemView;
import javax.swing.text.BadLocationException;

/**
 *
 * @author 58088
 */
public class Logseventswindow extends javax.swing.JFrame {

    /**
     * Creates new form logseventswindow
     */
    public Logseventswindow() {
        initComponents();
        this.setLocationRelativeTo(null);
        this.setTitle("Sinchronizacijos įrankis: Įrašai ir įvykiai");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenu1 = new javax.swing.JMenu();
        jMenuBar2 = new javax.swing.JMenuBar();
        jMenu2 = new javax.swing.JMenu();
        jMenu3 = new javax.swing.JMenu();
        OpenLogBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        BackToMainBtn = new javax.swing.JButton();
        FilterField = new javax.swing.JTextField();
        FilterBtn = new javax.swing.JButton();
        ShowEventsBtn = new javax.swing.JButton();
        EventFileList = new javax.swing.JComboBox<>();
        EventTypeList = new javax.swing.JComboBox<>();
        FilterEventsBtn = new javax.swing.JButton();
        FromCalendar = new com.toedter.calendar.JDateChooser();
        ToCalendar = new com.toedter.calendar.JDateChooser();
        DataNuoLabel = new javax.swing.JLabel();
        DataIkiLabel = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu7 = new javax.swing.JMenu();
        OpenLogMenuBtn = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenu4 = new javax.swing.JMenu();
        jMenu5 = new javax.swing.JMenu();
        MainViewBtnLog = new javax.swing.JMenuItem();
        LogViewBtnLog = new javax.swing.JMenuItem();
        HelpBtn = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();

        jMenu1.setText("jMenu1");

        jMenu2.setText("File");
        jMenuBar2.add(jMenu2);

        jMenu3.setText("Edit");
        jMenuBar2.add(jMenu3);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(830, 650));

        OpenLogBtn.setText("Atidaryti įrašo failą");
        OpenLogBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OpenLogBtnActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jTextArea1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jScrollPane1.setViewportView(jTextArea1);

        BackToMainBtn.setText("Grįžti į pagrindinį");
        BackToMainBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BackToMainBtnActionPerformed(evt);
            }
        });

        FilterField.setText("Filtro žodis");
        FilterField.addFocusListener(new FocusListener() {
            @Override
            public void focusGained(FocusEvent e) {
                if (FilterField.getText().equals("Filtro žodis")) {
                    FilterField.setText("");
                }
            }
            @Override
            public void focusLost(FocusEvent e) {
                if (FilterField.getText().isEmpty()) {
                    FilterField.setText("Filtro žodis");
                }
            }
        });

        FilterBtn.setText("Filtruoti įrašo turinį");
        FilterBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FilterBtnActionPerformed(evt);
            }
        });

        ShowEventsBtn.setText("Atvaizduoti įvykius");
        ShowEventsBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ShowEventsBtnActionPerformed(evt);
            }
        });

        EventFileList.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        EventFileList.setMaximumSize(new java.awt.Dimension(32767, 150));
        EventFileList.setMinimumSize(new java.awt.Dimension(56, 150));
        EventFileList.setVisible(false);

        EventTypeList.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        EventTypeList.setVisible(false);

        FilterEventsBtn.setText("Filtruoti įvykius");
        FilterEventsBtn.setVisible(false);
        FilterEventsBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FilterEventsBtnActionPerformed(evt);
            }
        });

        FromCalendar.setDateFormatString("yyyy-MM-dd");
        FromCalendar.setVisible(false);

        ToCalendar.setVisible(false);
        ToCalendar.setDateFormatString("yyyy-MM-dd");

        DataNuoLabel.setText("Data nuo:");
        DataNuoLabel.setVisible(false);

        DataIkiLabel.setText("Data iki:");
        DataIkiLabel.setVisible(false);

        jMenu7.setText("Meniu");

        OpenLogMenuBtn.setText("Atidaryti įrašo failą");
        OpenLogMenuBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OpenLogMenuBtnActionPerformed(evt);
            }
        });
        jMenu7.add(OpenLogMenuBtn);

        jMenuItem5.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, java.awt.event.InputEvent.ALT_MASK));
        jMenuItem5.setText("Išeiti");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu7.add(jMenuItem5);

        jMenuBar1.add(jMenu7);

        jMenu4.setText("Nustatymai");
        jMenuBar1.add(jMenu4);

        jMenu5.setText("Rodymas");

        MainViewBtnLog.setText("Pagrindinis langas");
        MainViewBtnLog.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MainViewBtnLogActionPerformed(evt);
            }
        });
        jMenu5.add(MainViewBtnLog);

        LogViewBtnLog.setText("Įvykių ir įrašų langas");
        LogViewBtnLog.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LogViewBtnLogActionPerformed(evt);
            }
        });
        jMenu5.add(LogViewBtnLog);

        jMenuBar1.add(jMenu5);

        HelpBtn.setText("Pagalba");

        jMenuItem2.setText("IT Pagalba");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        HelpBtn.add(jMenuItem2);

        jMenuBar1.add(HelpBtn);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 635, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(FilterField, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(OpenLogBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(FilterBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ShowEventsBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(EventFileList, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(EventTypeList, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(FromCalendar, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ToCalendar, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(BackToMainBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(FilterEventsBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(57, 57, 57)
                        .addComponent(DataNuoLabel))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(61, 61, 61)
                        .addComponent(DataIkiLabel)))
                .addContainerGap(19, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(OpenLogBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(FilterField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(FilterBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(ShowEventsBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(EventFileList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(EventTypeList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(DataNuoLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(FromCalendar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(DataIkiLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ToCalendar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 113, Short.MAX_VALUE)
                        .addComponent(FilterEventsBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(BackToMainBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public class CustomOutputStreamLogs extends OutputStream {
    private JTextArea textArea;

    public CustomOutputStreamLogs(JTextArea textArea) {
        this.textArea = textArea;
    }

    @Override
    public void write(int b) throws IOException {
        // redirects data to the text area
        textArea.append(String.valueOf((char)b));
        // scrolls the text area to the end of data
        textArea.setCaretPosition(textArea.getDocument().getLength());
        // keeps the textArea up to date
        textArea.update(textArea.getGraphics());
    }
}
   
    public JFileChooser j = new JFileChooser(FileSystemView.getFileSystemView());
    public int r;
    public String publicoutline = "";
    
    
    private void OpenLogBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OpenLogBtnActionPerformed

        try
        {
        JTextArea textArea = jTextArea1;
        PrintStream printStream = new PrintStream(new CustomOutputStreamLogs(textArea), true, "Cp775");
        System.setOut(printStream);
        System.setErr(printStream);
        
        textArea.setText("");
        
        j.setCurrentDirectory(new File("C:\\Users\\58088\\Desktop\\bakiotestai\\logs"));
        
        r = j.showOpenDialog(null);
        
        String l;
        
        if (r == JFileChooser.APPROVE_OPTION) 
        { 
           l = (j.getSelectedFile().getAbsolutePath()); 
           System.out.println("Pasirinktas failas: " + l);
           System.out.println("Failo turinys:");
        } 
        else
        { 
            l = ("Failas nepasirinktas");          
            JOptionPane.showMessageDialog(new JFrame(), l, "Informacija", JOptionPane.INFORMATION_MESSAGE);  
        }
                   
        BufferedReader br = new BufferedReader(new FileReader(l));
        
        String line;
        
        String outline="";
        
        while((line = br.readLine()) != null)
        {
            publicoutline = publicoutline + line + "\n";
        }
        
        try
        {
          jTextArea1.getDocument().insertString(102, "\n", null);  
          jTextArea1.getDocument().insertString(103, publicoutline, null);
        }
        catch (BadLocationException ex)
        {
            String LocationCatch = ""; 
            LocationCatch = ex.getMessage();
        }
             
        }
        catch(Exception ee)
        {
            String LocationCatch = "";
            
            LocationCatch = ee.getMessage(); 
        }
               
    }//GEN-LAST:event_OpenLogBtnActionPerformed

    private void MainViewBtnLogActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MainViewBtnLogActionPerformed
        
     this.setVisible(false);
        
     new InterfaceLangas().setVisible(true);
    
    }//GEN-LAST:event_MainViewBtnLogActionPerformed

    private void BackToMainBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BackToMainBtnActionPerformed
                
        this.setVisible(false);
        
        new InterfaceLangas().setVisible(true);
    }//GEN-LAST:event_BackToMainBtnActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
            
    String urlString = "http://pagalba.vgtu.lt";    
        
    try {
        Desktop.getDesktop().browse(new URL(urlString).toURI());
    } catch (Exception e) {
        e.printStackTrace();
    }
    
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void LogViewBtnLogActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LogViewBtnLogActionPerformed
        
        JOptionPane.showMessageDialog(new JFrame(), "Jau esate įvykių ir įrašų lange.", "Informacija", JOptionPane.INFORMATION_MESSAGE);
        
    }//GEN-LAST:event_LogViewBtnLogActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        
        System.exit(0);
        
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void OpenLogMenuBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OpenLogMenuBtnActionPerformed
       
        try
        {
        JTextArea textArea = jTextArea1;
        PrintStream printStream = new PrintStream(new CustomOutputStreamLogs(textArea), true, "Cp775");
        System.setOut(printStream);
        System.setErr(printStream);
        
        textArea.setText("");
        
        j.setCurrentDirectory(new File("C:\\Users\\58088\\Desktop\\bakiotestai\\logs"));
        
        r = j.showOpenDialog(null);
        
        String l;
        
        if (r == JFileChooser.APPROVE_OPTION) 
        { 
           l = (j.getSelectedFile().getAbsolutePath()); 
           System.out.println("Pasirinktas failas: " + l);
           System.out.println("Failo turinys:");
        } 
        else
        { 
            l = ("Failas nepasirinktas");          
            JOptionPane.showMessageDialog(new JFrame(), l, "Informacija", JOptionPane.INFORMATION_MESSAGE);  
        }
                   
        BufferedReader br = new BufferedReader(new FileReader(l));
        
        String line;
        
        String outline="";
        
        while((line = br.readLine()) != null)
        {
            publicoutline = publicoutline + line + "\n";
        }
        
        try
        {
          jTextArea1.getDocument().insertString(102, "\n", null);  
          jTextArea1.getDocument().insertString(103, publicoutline, null);
        }
        catch (BadLocationException ex)
        {
            String LocationCatch = ""; 
            LocationCatch = ex.getMessage();
        }
             
        }
        catch(Exception ee)
        {
            String LocationCatch = "";
            
            LocationCatch = ee.getMessage(); 
        }
           
    }//GEN-LAST:event_OpenLogMenuBtnActionPerformed

    public String FilterWord = "";
    
    private void FilterBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FilterBtnActionPerformed
                
        FilterWord = FilterField.getText();
                
        if(FilterWord.equals("Filtro žodis") || FilterWord.equals(""))
        {
            JOptionPane.showMessageDialog(new JFrame(), "Neįvestas filtravimo žodis.", "Informacija", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        
        try
        {
        JTextArea textArea = jTextArea1;
        String l;
        PrintStream printStream = new PrintStream(new CustomOutputStreamLogs(textArea), true, "Cp775");
        System.setOut(printStream);
        System.setErr(printStream);
        //kopija
        
        if (r == JFileChooser.APPROVE_OPTION) 
        { 
           l = (j.getSelectedFile().getAbsolutePath()); 
        } 
        else
        { 
            l = ("Failas nepasirinktas");          
            JOptionPane.showMessageDialog(new JFrame(), l, "Informacija", JOptionPane.INFORMATION_MESSAGE);  
            return;
        }
                   
        BufferedReader br = new BufferedReader(new FileReader(l));
        
        jTextArea1.setText("");
        
        String filterouptut = "Pasirinktas failas: " + l + "\n" + "Filtravimo zodis: " + FilterWord + "\n";
        
        String line;
        
        String outline="";
        
        String[] linijos = publicoutline.split("\n");
        
        String filteredString="";
        
        for(int i=0; i<linijos.length; i++)
        {
         
            if(linijos[i].contains(FilterWord))
            {
                filteredString = filteredString + linijos[i] + "\n";
            }
            
        }
        
        try
        {
          jTextArea1.getDocument().insertString(0, filterouptut, null);  
          jTextArea1.getDocument().insertString(filterouptut.length(), filteredString, null);
        }
        catch (BadLocationException ex)
        {
            String LocationCatch = ""; 
            LocationCatch = ex.getMessage();
        }
        
        }
        catch(Exception ee)
        {
            String LocationCatch = "";
            LocationCatch = ee.getMessage(); 
        }
                 
    }//GEN-LAST:event_FilterBtnActionPerformed

    public File[] listOfFiles;
    
    private void ShowEventsBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ShowEventsBtnActionPerformed
        
        jTextArea1.setText("");
        
        String folderpath = "C:\\Users\\58088\\Desktop\\bakiotestai\\events";
        
        String csvpath = "C:\\Users\\58088\\Desktop\\bakiotestai\\events\\TestAuditas-15-48-36.csv";
        
        String testpath = "C:\\Users\\58088\\Desktop\\bakiotestai\\events\\TestAudit.csv";
        
        File Folder = new File(folderpath);
        File[] files = Folder.listFiles();
        
        String[] FileList = new String[files.length+1];
        
        FileList[0] = "Visi įvykių failai";
        
        for(int i=0; i<files.length; i++)
        {
           FileList[i+1] = files[i].getName();  
        }
                
        String line;
        String cvsSplitBy = ",";
        
        int indeks = 0; 
        
        String outline = "";
        
        File folder = new File("C:\\Users\\58088\\Desktop\\bakiotestai\\events");
        listOfFiles = folder.listFiles();

        for (File file : listOfFiles) 
        {
            if (file.isFile() && file.getName().contains(".csv"))
            {
                
                String Filename = file.getAbsolutePath();   
                
                outline = outline + "Rastas failas: " + Filename + "\n" + "\n";
                
                try (Scanner scanner = new Scanner(new File(Filename));) 
                {
                    while (scanner.hasNextLine())
                    {
                        outline = outline + scanner.nextLine() + "\n";
                        indeks++;
                    }
                } 
                catch (IOException e) 
                {
                   e.printStackTrace();
                }  
                
            }
                outline = outline + "\n";
        }
        
        try
        {
          jTextArea1.getDocument().insertString(0, outline, null);  
//          jTextArea1.getDocument().insertString(outline.length(), indeks + " irasu rasta.", null);
        }
        catch (BadLocationException ex)
        {
            String LocationCatch = ""; 
            LocationCatch = ex.getMessage();
        }
        
        publicoutline = outline;
        
        EventFileList.setModel(new DefaultComboBoxModel<String>(FileList));
        DataIkiLabel.setVisible(true);
        EventFileList.setVisible(true);
        DataNuoLabel.setVisible(true);    
        EventTypeList.setVisible(true);
        ToCalendar.setVisible(true);
        FromCalendar.setVisible(true);
        
        ArrayList<String> EventList = new ArrayList<String>();
                EventList.add("Visi įvykiai");
                EventList.add("Door opened (key)");
                EventList.add("Key updated (Online)");
                EventList.add("Opening not allowed");
                EventList.add("Door opened (switch)");
                EventList.add("Low battery level");
                
                String[] eventz = new String[EventList.size()];
                EventList.toArray(eventz);

        EventTypeList.setModel(new DefaultComboBoxModel<String>(eventz));
        
        FilterEventsBtn.setVisible(true);
           
    }//GEN-LAST:event_ShowEventsBtnActionPerformed

    private void FilterEventsBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FilterEventsBtnActionPerformed
        
        String SelectedFile = "C:\\Users\\58088\\Desktop\\bakiotestai\\events\\" +EventFileList.getSelectedItem().toString();
        
          
        String SelectedType = EventTypeList.getSelectedItem().toString();
        
        String outline = "";
        int indeks = 0;
                
        if(EventFileList.getSelectedIndex() == 0 && EventTypeList.getSelectedIndex() == 0) //abu tusti
        {  
        
                File folder = new File("C:\\Users\\58088\\Desktop\\bakiotestai\\events");
                listOfFiles = folder.listFiles();

                for (File file : listOfFiles) 
                {
                    if (file.isFile() && file.getName().contains(".csv"))
                    {

                        String Filename = file.getAbsolutePath();   

                        outline = outline + "Rastas failas: " + Filename + "\n" + "\n";

                        try (Scanner scanner = new Scanner(new File(Filename));) 
                        {
                            while (scanner.hasNextLine())
                            {
                                outline = outline + scanner.nextLine() + "\n";
                                indeks++;
                            }
                        } 
                        catch (IOException e) 
                        {
                           e.printStackTrace();
                        }  

                    }
                        outline = outline + "\n";
                }

                try
                {
                  jTextArea1.setText("");  
                  jTextArea1.getDocument().insertString(0, outline, null);  
                }
                catch (BadLocationException ex)
                {
                    String LocationCatch = ""; 
                    LocationCatch = ex.getMessage();
                }
             
        }
        
        if(EventFileList.getSelectedIndex() != 0 && EventTypeList.getSelectedIndex() != 0) //ABU
        {
            jTextArea1.setText("");
                            
                try (Scanner scanner = new Scanner(new File(SelectedFile));) 
                {
                    while (scanner.hasNextLine())
                    {
                        outline = outline + scanner.nextLine() + "\n";
                    }
                } 
                catch (IOException e) 
                {
                   e.printStackTrace();
                }  
                
            String[] linijos = outline.split("\n");

            String filteredString="";

            for(int i=0; i<linijos.length; i++)
            {
                if(linijos[i].contains(SelectedType))
                {
                    filteredString = filteredString + linijos[i] + "\n";
                    indeks++;
                }
            }
               
            outline = filteredString;
            
            String FilterStartString = "Filtruojama pagal failą " + SelectedFile + "\n" + "Ir pagal įvykį '" + SelectedType + "' \n";  
        
            try
            {
              jTextArea1.setText("");
              jTextArea1.getDocument().insertString(0, FilterStartString, null);
              jTextArea1.getDocument().insertString(FilterStartString.length()+1, outline, null);
    //          jTextArea1.getDocument().insertString(outline.length()+43, indeks + " irasu filtruota.", null);
            }
            catch (BadLocationException ex)
            {
                String LocationCatch = ""; 
                LocationCatch = ex.getMessage();
            }
            
        }               
        
        if(EventFileList.getSelectedIndex() == 0 && EventTypeList.getSelectedIndex() != 0) //TIK EVENTAS
        {
            
            String[] linijos = publicoutline.split("\n");
            
            String filteredString = "";
            
            for(int i=0; i<linijos.length; i++)
            {

                if(linijos[i].contains(SelectedType))
                {
                    filteredString = filteredString + linijos[i] + "\n";
                    indeks++;
                }

            }
               
            outline = filteredString;
            
            String FilterStartString = "Filtruojama pagal įvykį '" + SelectedType +  "' \n"; 
            
            jTextArea1.setText("");
        
            try
            {
              jTextArea1.setText("");  
              jTextArea1.getDocument().insertString(0, FilterStartString, null);
              jTextArea1.getDocument().insertString(FilterStartString.length(), outline, null);
  //            jTextArea1.getDocument().insertString(filteredString.length()+43, indeks + " irasu filtruota.", null);
            }
            catch (BadLocationException ex)
            {
                String LocationCatch = ""; 
                LocationCatch = ex.getMessage();
            }
            
        }
        
        if(EventFileList.getSelectedIndex() != 0 && EventTypeList.getSelectedIndex() == 0) //TIK FAILAS
        {
            jTextArea1.setText("");
                            
                try (Scanner scanner = new Scanner(new File(SelectedFile));) 
                {
                    while (scanner.hasNextLine())
                    {
                        outline = outline + scanner.nextLine() + "\n";
                    }
                } 
                catch (IOException e) 
                {
                   e.printStackTrace();
                }  
                

            String FilterStartString = "Filtruojama pagal failą " + SelectedFile + "\n";  
        
            try
            {
              jTextArea1.setText("");  
              jTextArea1.getDocument().insertString(0, FilterStartString, null);
              jTextArea1.getDocument().insertString(FilterStartString.length()+1, outline, null);
            }
            catch (BadLocationException ex)
            {
                String LocationCatch = ""; 
                LocationCatch = ex.getMessage();
            }
            
        }
//-------------------------------------------------------------------------------------DATOS FILTRAI        
        if(FromCalendar.getDate() != null && ToCalendar.getDate() == null) //tik NUO
        {            
            try
            {
                SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
                Date FromDate = FromCalendar.getDate();
                String strFromDate = sdf.format(FromDate);

                Date FromDateFormatted = new SimpleDateFormat("yyyy-MM-dd").parse(strFromDate);           

                String dateString = "";

                String[] linijos = outline.split("\n");

                for(int i=0; i<linijos.length; i++)
                {
                    if(linijos[i].startsWith("2"))
                    {                      
                        Date EventDate = new SimpleDateFormat("yyyy-MM-dd").parse(linijos[i].substring(0,10));
                        
                        if(EventDate.compareTo(FromDateFormatted) > 0 || EventDate.compareTo(FromDateFormatted) == 0)
                        {
                            dateString = dateString + linijos[i] + "\n";
                        }  
                    } 
                }
         
            jTextArea1.setText("");
            jTextArea1.getDocument().insertString(0, dateString, null); 
            }
            catch (ParseException ex)
            {
               Logger.getLogger(Logseventswindow.class.getName()).log(Level.SEVERE, null, ex);
            } catch (BadLocationException ex) {
                Logger.getLogger(Logseventswindow.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
 //---------------------------------------------------------------------------------------------       
        if(FromCalendar.getDate() == null && ToCalendar.getDate() != null) //tik IKI
        {  
            try
            { 
                SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");

                Date ToDate = ToCalendar.getDate();
                String strToDate = sdf.format(ToDate);

                Date ToDateFormatted = new SimpleDateFormat("yyyy-MM-dd").parse(strToDate);           

                String dateString = "";

                String[] linijos = outline.split("\n");

                for(int i=0; i<linijos.length; i++)
                {
                    if(linijos[i].startsWith("2"))
                    {                     
                        Date EventDate = new SimpleDateFormat("yyyy-MM-dd").parse(linijos[i].substring(0,10));
                        
                        if(EventDate.compareTo(ToDateFormatted) < 0 || EventDate.compareTo(ToDateFormatted) == 0)
                        {
                            dateString = dateString + linijos[i] + "\n";
                        }  
                    }
                }
                
            jTextArea1.setText("");
            jTextArea1.getDocument().insertString(0, dateString, null);  
            }
            catch (ParseException ex)
            {
               Logger.getLogger(Logseventswindow.class.getName()).log(Level.SEVERE, null, ex);
            } catch (BadLocationException ex) {
                Logger.getLogger(Logseventswindow.class.getName()).log(Level.SEVERE, null, ex);
            }
            
        }
        //---------------------------------------------------------------------------------------------
        if(FromCalendar.getDate() != null && ToCalendar.getDate() != null) //ABU
        {
            try
            { 
                SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");

                Date FromDate = FromCalendar.getDate();
                Date ToDate = ToCalendar.getDate();

                String strFromDate = sdf.format(FromDate);
                String strToDate = sdf.format(ToDate);

                Date FromDateFormatted = new SimpleDateFormat("yyyy-MM-dd").parse(strFromDate);   
                
                Date ToDateFormatted = new SimpleDateFormat("yyyy-MM-dd").parse(strToDate);

                String dateString = "";

                String[] linijos = outline.split("\n");

                for(int i=0; i<linijos.length; i++)
                {
                    if(linijos[i].startsWith("2"))
                    {                       
                        Date EventDate = new SimpleDateFormat("yyyy-MM-dd").parse(linijos[i].substring(0,10));
                        
                        if( EventDate.compareTo(FromDateFormatted) > 0 && EventDate.compareTo(ToDateFormatted) < 0  || EventDate.compareTo(FromDateFormatted) == 0 || EventDate.compareTo(ToDateFormatted) == 0)
                        {
                            dateString = dateString + linijos[i] + "\n";
                        }                  
                    }
                }
                
            jTextArea1.setText("");
            jTextArea1.getDocument().insertString(0, dateString, null);  
            }
            catch (ParseException ex)
            {
               Logger.getLogger(Logseventswindow.class.getName()).log(Level.SEVERE, null, ex);
            } catch (BadLocationException ex) {
                Logger.getLogger(Logseventswindow.class.getName()).log(Level.SEVERE, null, ex);
            }
            
        }
  
    }//GEN-LAST:event_FilterEventsBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Logseventswindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Logseventswindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Logseventswindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Logseventswindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Logseventswindow().setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BackToMainBtn;
    private javax.swing.JLabel DataIkiLabel;
    private javax.swing.JLabel DataNuoLabel;
    public javax.swing.JComboBox<String> EventFileList;
    public javax.swing.JComboBox<String> EventTypeList;
    private javax.swing.JButton FilterBtn;
    public javax.swing.JButton FilterEventsBtn;
    public javax.swing.JTextField FilterField;
    public com.toedter.calendar.JDateChooser FromCalendar;
    private javax.swing.JMenu HelpBtn;
    private javax.swing.JMenuItem LogViewBtnLog;
    private javax.swing.JMenuItem MainViewBtnLog;
    private javax.swing.JButton OpenLogBtn;
    private javax.swing.JMenuItem OpenLogMenuBtn;
    private javax.swing.JButton ShowEventsBtn;
    public com.toedter.calendar.JDateChooser ToCalendar;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenu jMenu7;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuBar jMenuBar2;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables
}
